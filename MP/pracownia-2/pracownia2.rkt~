#lang racket

(require data/heap)
#;(provide sim? wire?
         (contract-out
          [make-sim        (-> sim?)]
          [sim-wait!       (-> sim? positive? void?)]
          [sim-time        (-> sim? real?)]
          [sim-add-action! (-> sim? positive? (-> any/c) void?)]

          [make-wire       (-> sim? wire?)]
          [wire-on-change! (-> wire? (-> any/c) void?)]
          [wire-value      (-> wire? boolean?)]
          [wire-set!       (-> wire? boolean? void?)]

          [bus-value (-> (listof wire?) natural?)]
          [bus-set!  (-> (listof wire?) natural? void?)]

          [gate-not  (-> wire? wire? void?)]
          [gate-and  (-> wire? wire? wire? void?)]
          [gate-nand (-> wire? wire? wire? void?)]
          [gate-or   (-> wire? wire? wire? void?)]
          [gate-nor  (-> wire? wire? wire? void?)]
          [gate-xor  (-> wire? wire? wire? void?)]

          [wire-not  (-> wire? wire?)]
          [wire-and  (-> wire? wire? wire?)]
          [wire-nand (-> wire? wire? wire?)]
          [wire-or   (-> wire? wire? wire?)]
          [wire-nor  (-> wire? wire? wire?)]
          [wire-xor  (-> wire? wire? wire?)]

          [flip-flop (-> wire? wire? wire? void?)];juz napisana
          ))

;funkcje pomocnicze wyliczajace wartosci logiczne

(define (logical-not in x);zeby mozna bylo odpalac zawsze z 2 argumentami
  (not in))
(define (logical-and in1 in2)
  (and in1 in2))
(define (logical-nand in1 in2)
  (not (and in1 in2)))
(define (logical-or in1 in2)
  (or in1 in2))
(define (logical-nor in1 in2)
  (and (not in1) (not in2)))
(define (logical-xor in1 in2)
  (and (not (and in1 in2)) (or in1 in2)))

;testy wartosci logicznych

(define (test-logical f)
  (display (f #f #f))
  (display (f #f #t))
  (display (f #t #f))
  (display (f #t #t)))




















#;(define (bus-set! wires value)
  (match wires
    ['() (void)]
    [(cons w wires)
     (begin
       (wire-set! w (= (modulo value 2) 1))
       (bus-set! wires (quotient value 2)))]))

#;(define (bus-value ws)
  (foldr (lambda (w value) (+ (if (wire-value w) 1 0) (* 2 value)))
         0
         ws))

#;(define (flip-flop out clk data)
  (define sim (wire-sim data))
  (define w1  (make-wire sim))
  (define w2  (make-wire sim))
  (define w3  (wire-nand (wire-and w1 clk) w2))
  (gate-nand w1 clk (wire-nand w2 w1))
  (gate-nand w2 w3 data)
  (gate-nand out w1 (wire-nand out w3)))


;poczatek pracowni (wire, action, itp)

;(wire-set)

;jesli sie wartosc nie zmienia to nie warto nic robic
;jesli sie zmieni to: (sim-add-action) dodaje wszystkie akcje
;na stos (trzeba dodac z odpowiednim czasem). Zaleznie od tego, jaka to akcja
;to mamy odpowiednio czas 1 lub 2 (chyba ze chce zrobic tak, zeby
;trzymac informacje jaki jest czas)

;